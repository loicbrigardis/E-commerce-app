{"version":3,"sources":["config.js","components/auth/index.js","components/core/cartHelpers.js","components/core/Menu.js","components/core/Layout.js","components/core/apiCore.js","components/core/showImage.js","components/core/Card.js","components/core/Search.js","components/core/Home.js","components/user/Signin.js","components/user/Signup.js","components/auth/PrivateRoute.js","components/auth/AdminRoute.js","components/user/UserDashboard.js","components/user/apiUser.js","components/user/AdminDashboard.js","components/admin/apiAdmin.js","components/admin/addCategory.js","components/admin/addProduct.js","components/admin/UpdateProduct.js","components/core/Checkbox.js","components/core/RadioBox.js","components/core/fixedPrices.js","components/core/Shop.js","components/core/Product.js","components/core/Checkout.js","components/core/Cart.js","components/admin/Orders.js","components/admin/ManageProducts.js","components/user/Profile.js","Routes.js","serviceWorker.js","index.js"],"names":["API","process","isAuthentificated","undefined","window","localStorage","getItem","JSON","parse","addItem","item","next","cart","push","count","Array","from","Set","map","p","_id","id","find","setItem","stringify","isActive","history","to","location","pathname","withRouter","useState","collapse","setCollapse","style","backgroundColor","dark","expand","scrolling","fixed","href","onClick","navbar","isOpen","left","active","className","length","right","user","role","nav","caret","icon","basic","color","removeItem","fetch","method","then","res","console","log","catch","err","error","signout","Layout","title","description","children","fluid","padding","backgroundSize","backgroundImage","getProducts","sortBy","json","getCategories","getFilteredProducts","skip","limit","filters","data","headers","Accept","body","ShowImage","url","alt","name","src","waves","Card","product","refreshPage","isSingle","showAddToCartButton","cartUpdate","showRemoveProductButton","redirect","setRedirect","setCount","addToCard","handleChange","productId","value","i","updateItem","showCartRemoveButton","splice","type","maxWidth","margin","shouldRedirect","substring","price","category","moment","createdAt","fromNow","showStock","quantity","outline","size","showAddToCart","maxValue","minValue","onChange","showCartUpdateOptions","Search","categories","search","results","searched","setData","useEffect","searchData","params","query","queryString","list","handleSubmit","e","preventDefault","target","searchMessage","width","display","c","key","paddingLeft","onSubmit","aria-describedby","placeholder","height","borderRadius","paddingTop","products","sm","md","lg","searchedProducts","Home","productsBySell","setProductsBySell","productsByArrival","setProductsByArrival","setError","Signin","email","password","loading","redirectToReferrer","values","setValues","signin","authenticate","center","msg","htmlFor","redirectUser","Signup","success","hasOwnProperty","pass","PrivateRoute","Component","component","rest","render","props","state","AdminRoute","Dashboard","setHistory","userEmail","token","init","userId","Authorization","getPurchaseHistory","h","iProduct","AdminDashboard","AddCategory","setName","setSuccess","createCategory","goBack","showSuccess","showError","minLength","autoFocus","required","AddProduct","shipping","photo","createdProduct","redirectToProfile","formData","FormData","files","set","createProduct","showLoading","rows","min","accept","categorie","UpdateProduct","match","getProduct","updateProduct","CheckBox","handleFilters","checked","setChecked","handleToggle","currentCategoryId","indexOf","newCheckCategoryId","listStyle","RadioBox","prices","setValue","array","Shop","setCategories","setSkip","setSize","filteredResults","setFilteredResults","myFilters","setMyFilters","loadFilteredResults","newFilters","loadMore","toSkip","filterBy","priceValues","handlePrice","parseInt","Checkbox","xs","Product","setProduct","relatedProduct","setRelatedProduct","loadSingleProduct","read","listRelated","Checkout","clientToken","instance","address","getToken","getBraintreeClientToken","getTotal","reduce","acc","deliveryAddress","buy","requestPaymentMethod","paymentData","paymentMethodNonce","nonce","amount","processPayment","createOrderData","transaction_id","transaction","order","createOrder","message","handleAddress","showDropIn","onBlur","label","background","options","authorization","paypal","flow","onInstance","Cart","items","setItems","refresh","setRefresh","Math","random","showItems","Orders","orders","setOrders","statusValues","setStatusValues","loadOrders","uderId","listOrders","loadStatusValues","getStatusValues","showInput","readOnly","handleStatusChange","orderId","status","updateOrderStatus","hover","orderIndex","borderTop","index","showStatus","colSpan","align","productIdex","ManageProducts","setProducts","loadProducts","destroy","confirm","deleteProduct","float","Profile","clickSubmit","update","auth","updateUser","passwor","far","profileUpdate","Routes","path","exact","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eddbdf15.chunk.js","sourcesContent":["export const API = process.env.REACT_APP_API_URL;","import { API } from '../../config';\n\nexport const signup = (user) => {\n    return fetch(`${API}/signup`, {\n        method: \"POST\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(user)\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const signin = (user) => {\n    return fetch(`${API}/signin`, {\n        method: \"POST\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(user)\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const authenticate = (data, next) => {\n    if (typeof window !== undefined) {\n        localStorage.setItem('jwt', JSON.stringify(data));\n        next();\n    }\n}\n\nexport const signout = (next) => {\n    if (typeof window !== undefined) {\n        localStorage.removeItem('jwt');\n        next();\n        return fetch(`${API}/signout`,\n            { method: \"GET\" }\n        )\n            .then((res) => { console.log('signout', res) })\n            .catch((err) => console.error(err))\n    }\n}\n\nexport const isAuthentificated = () => {\n    if (typeof window == undefined) {\n        return false;\n    }\n    if (localStorage.getItem('jwt')) {\n        return JSON.parse(localStorage.getItem('jwt'));\n    } else {\n        return false;\n    }\n}","\nexport const addItem = (item, next) => {\n    let cart = [];\n    if (typeof window !== 'undefined') {\n        if (localStorage.getItem('cart')) {\n            cart = JSON.parse(localStorage.getItem('cart'));\n        }\n        cart.push({\n            ...item,\n            count: 1\n        })\n\n        cart = Array.from(new Set(\n            cart\n                .map((p) => (p._id))\n                .map((id) => { return cart.find(p => p._id === id) })\n        ));\n\n        localStorage.setItem('cart', JSON.stringify(cart));\n        next();\n    }\n}\n\nexport const itemTotal = () => {\n    if (typeof window !== 'undefined') {\n        if (localStorage.getItem('cart')) {\n            return JSON.parse(localStorage.getItem('cart')).length;\n        }\n    }\n    return 0;\n}\n\nexport const getCart = () => {\n    if (typeof window !== 'undefined') {\n        if (localStorage.getItem('cart')) {\n            return JSON.parse(localStorage.getItem('cart'));\n        }\n    }\n    return [];\n}\n\nexport const updateItem = (productId, count) => {\n    let cart = [];\n    if (typeof window !== 'undefined') {\n        if (localStorage.getItem('cart')) {\n            cart = JSON.parse(localStorage.getItem('cart'));\n        }\n\n        cart.map((product, i) => {\n            if (product._id === productId) {\n                cart[i].count = count\n            }\n        })\n\n        localStorage.setItem('cart', JSON.stringify(cart));\n    }\n}\n\nexport const removeItem = (productId) => {\n    let cart = [];\n    if (typeof window !== 'undefined') {\n        if (localStorage.getItem('cart')) {\n            cart = JSON.parse(localStorage.getItem('cart'));\n        }\n\n        cart.map((product, i) => {\n            if (product._id === productId) {\n                cart.splice(i, 1)\n            }\n        })\n\n        localStorage.setItem('cart', JSON.stringify(cart));\n    }\n    return cart;\n}\n\nexport const emptyCart = next => {\n    if (typeof window !== 'undefined') {\n        localStorage.removeItem('cart')\n        next();\n    }\n}","import React, { useState } from 'react';\nimport { withRouter } from 'react-router';\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBDropdown, MDBDropdownToggle, MDBIcon, MDBDropdownMenu, MDBDropdownItem } from 'mdbreact';\n\nimport { signout, isAuthentificated } from '../auth';\nimport { itemTotal } from './cartHelpers';\n\nconst isActive = (history, to) => {\n    if (history.location.pathname === to) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst Menu = ({ history }) => {\n    const [collapse, setCollapse] = useState(false);\n\n    const bgColor = { backgroundColor: 'rgba(0, 0, 0, 0.85)' }\n    return (\n        <div>\n            <header>\n                <MDBNavbar style={bgColor} dark expand=\"md\" scrolling fixed=\"top\">\n                    <MDBNavbarBrand href=\"/\">\n                        <strong>E-Books'</strong>\n                    </MDBNavbarBrand>\n                    <MDBNavbarToggler onClick={() => setCollapse(!collapse)} />\n                    <MDBCollapse navbar isOpen={collapse}>\n                        <MDBNavbarNav left>\n                            <MDBNavItem active={isActive(history, '/')} >\n                                <MDBNavLink to=\"/\">Home</MDBNavLink>\n                            </MDBNavItem>\n                            <MDBNavItem className=\"ml-2\" active={isActive(history, '/shop')} >\n                                <MDBNavLink to=\"/shop\">Shop</MDBNavLink>\n                            </MDBNavItem>\n                            <MDBNavItem className=\"ml-2\" active={isActive(history, '/cart')} >\n                                <MDBNavLink to=\"/cart\">\n                                    <i className=\"fas fa-shopping-cart\"></i>\n                                    Cart\n                                    <span className=\"badge badge-success ml-2\">{itemTotal()}</span>\n                                </MDBNavLink>\n                            </MDBNavItem>\n                        </MDBNavbarNav>\n                        <MDBNavbarNav right>\n                            {!isAuthentificated() && (\n                                <>\n                                    <MDBNavItem active={isActive(history, '/signin')}>\n                                        <MDBNavLink to=\"/signin\">Signin</MDBNavLink>\n                                    </MDBNavItem>\n                                    <MDBNavItem active={isActive(history, '/signup')}>\n                                        <MDBNavLink to=\"/signup\">Signup</MDBNavLink>\n                                    </MDBNavItem>\n                                </>\n                            )}\n                            {isAuthentificated() && isAuthentificated().user.role === 0 && (\n                                <>\n                                    <MDBNavItem active={isActive(history, '/user/dashboard')}>\n                                        <MDBNavLink to=\"/user/dashboard\">Dashboard</MDBNavLink>\n                                    </MDBNavItem>\n                                </>\n                            )}\n                            {isAuthentificated() && isAuthentificated().user.role === 1 && (\n\n                                <MDBNavItem active={isActive(history, '/admin/dashboard')}>\n                                    <MDBNavLink to=\"/admin/dashboard\">Admin Dashboard</MDBNavLink>\n                                </MDBNavItem>\n\n                            )}\n                            {isAuthentificated() && (\n                                <>\n                                    <MDBNavItem>\n                                        <MDBDropdown>\n                                            <MDBDropdownToggle nav caret>\n                                                <MDBIcon icon=\"user\" />\n                                            </MDBDropdownToggle>\n                                            <MDBDropdownMenu basic color=\"info\">\n                                                <MDBDropdownItem onClick={() => signout(() => { history.push(\"/\") })}>\n                                                    Signout\n                                        </MDBDropdownItem>\n                                            </MDBDropdownMenu>\n                                        </MDBDropdown>\n                                    </MDBNavItem>\n                                </>\n                            )}\n                        </MDBNavbarNav>\n                    </MDBCollapse>\n                </MDBNavbar>\n            </header>\n        </div>\n    );\n}\n\nexport default withRouter(Menu);","import React from 'react';\nimport Menu from '../core/Menu';\nimport { MDBContainer, MDBJumbotron, MDBRow, MDBCol, MDBCardTitle } from \"mdbreact\";\n\n\nconst Layout = ({ title = 'Title', description = 'description', children }) => {\n    return (\n        <>\n            <Menu />\n            <MDBContainer className=\"text-center\" fluid>\n                <MDBRow>\n                    <MDBCol style={{ padding: 0 }} >\n                        <MDBJumbotron style={{ padding: 0 }}>\n                            <MDBCol className=\"text-white effect2 text-center py-1 px-4 my-1\" style={{ backgroundSize: 'cover', backgroundImage: `url(https://nordiclifescience.org/wp-content/public_html/2018/01/publication-e1516615172666.jpg)` }}>\n                                <MDBCol className=\"py-4\">\n                                    <MDBCardTitle className=\"l-title h1-responsive pt-3 m-5 font-bold\">{title}</MDBCardTitle>\n                                    <p className=\"l-desc mx-5 mb-2\">{description}</p>\n                                </MDBCol>\n                            </MDBCol>\n                        </MDBJumbotron>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n            <MDBContainer>\n                <MDBRow>\n                    <MDBCol>{children}</MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        </>\n    )\n}\n\nexport default Layout;","import queryString from 'query-string';\n\nimport { API } from '../../config';\n\nexport const getProducts = (sortBy) => {\n    return fetch(`${API}/products?sortBy=${sortBy}&order=desc&limit=6`, {\n        method: \"GET\"\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const getCategories = () => {\n    return fetch(`${API}/categories`, {\n        method: \"GET\"\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const read = (productId) => {\n    return fetch(`${API}/product/${productId}`, {\n        method: \"GET\"\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const getFilteredProducts = (skip, limit, filters = {}) => {\n    const data = { limit, skip, filters };\n    return fetch(`${API}/products/by/search`, {\n        method: \"POST\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const list = (params) => {\n    const query = queryString.stringify(params);\n    return fetch(`${API}/products/search?${query}`, {\n        method: \"GET\"\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const listRelated = (productId) => {\n    return fetch(`${API}/products/related/${productId}`, {\n        method: \"GET\"\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const getBraintreeClientToken = (userId, token) => {\n    return fetch(`${API}/braintree/getToken/${userId}`, {\n        method: \"GET\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const processPayment = (userId, token, paymentData) => {\n    return fetch(`${API}/braintree/payment/${userId}`, {\n        method: \"POST\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(paymentData)\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const createOrder = (userId, token, createOrderData) => {\n    return fetch(`${API}/order/create/${userId}`, {\n        method: \"POST\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({ order: createOrderData })\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}","import React from 'react';\nimport { MDBCardImage } from 'mdbreact';\n\nimport { API } from '../../config';\n\nconst ShowImage = ({ item, url }) => (\n    <MDBCardImage style={{ backgroundSize: \"cover\" }} className=\"img-fluid\" alt={item.name} src={`${API}/${url}/photo/${item._id}`} waves />\n)\n\nexport default ShowImage;","import React, { useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport moment from 'moment';\nimport InputRange from 'react-input-range';\nimport { MDBBtn, MDBBadge, MDBCard, MDBIcon, MDBCardBody, MDBCardTitle, MDBCardText } from 'mdbreact';\n\nimport ShowImage from './showImage';\nimport { addItem, updateItem, removeItem } from './cartHelpers';\n\nconst Card = ({ product, refreshPage, isSingle = false, showAddToCartButton = true, cartUpdate = false, showRemoveProductButton = false, ...rest }) => {\n\n    const [redirect, setRedirect] = useState(false);\n    const [count, setCount] = useState(product.count);\n\n    const singleProductView = () => (\n        !isSingle && (<>\n            <MDBBtn outline color=\"info\" size=\"sm\">\n                <Link color=\"mdb-color\" size=\"sm\" to={`/product/${product._id}`}>More infos</Link>\n            </MDBBtn>\n        </>)\n    )\n\n    const addToCard = () => {\n        addItem(product, () => {\n            setRedirect(true)\n        })\n    }\n\n    const shouldRedirect = (redirect) => {\n        if (redirect) {\n            return <Redirect to='/cart' />\n        }\n    }\n\n    const showAddToCart = (showAddToCartButton) => {\n        if (showAddToCartButton && product.quantity > 0) {\n            return (\n                <MDBBtn className=\"float-right\" onClick={addToCard} size=\"sm\" color=\"indigo\" href=\"\" >\n                    <MDBIcon icon=\"shopping-cart\" />\n                </MDBBtn>\n            )\n        }\n\n    }\n\n    const handleChange = (productId, value) => {\n        setCount(value < 1 ? 1 : value);\n        if (value >= 1) {\n            updateItem(productId, value);\n            refreshPage();\n        }\n    }\n\n    const showCartUpdateOptions = cartUpdate => {\n        return cartUpdate && (\n            <>\n                <h5 className=\"mb-3\">Quantity</h5>\n                <InputRange\n                    maxValue={20}\n                    minValue={1}\n                    value={count}\n                    onChange={(value) => handleChange(product._id, value)} />\n                <br />\n            </>\n        )\n    }\n\n    const showCartRemoveButton = showRemoveProductButton => {\n        return cartUpdate && (\n            <>\n                <button\n                    onClick={() => {\n                        removeItem(product._id);\n                        refreshPage();\n                    }}\n                    type=\"button\"\n                    className=\"btn btn-light btn-sm\">Remove product</button>\n            </>\n        )\n    }\n\n    const showStock = (product) => {\n        return product > 0\n            ? (<MDBBadge className=\"ml-2\" color=\"info\">In stock</MDBBadge>)\n            : (<MDBBadge className=\"ml-2\" color=\"warning\">Not in stock</MDBBadge>)\n    }\n\n    return (\n        <MDBCard style={{ maxWidth: \"255px\", margin: \"0 auto\" }}>\n            {shouldRedirect(redirect)}\n            <ShowImage item={product} url=\"product\" />\n            <MDBCardBody>\n                <MDBCardTitle>{product.name}</MDBCardTitle>\n                <MDBCardText>\n                    {product.description.substring(0, 100)}...\n                </MDBCardText>\n                <MDBCardText>\n                    {product.price} €\n                </MDBCardText>\n                <MDBCardText>\n                    Category: {product.category && product.category.name}\n                </MDBCardText>\n                <MDBCardText>\n                    Added on {moment(product.createdAt).fromNow()}\n                </MDBCardText>\n\n                {showStock(product.quantity)}\n                <br />\n                {singleProductView()}\n\n                {showAddToCart(showAddToCartButton)}\n\n                {showCartUpdateOptions(cartUpdate)}\n\n                {showCartRemoveButton(showCartRemoveButton)}\n\n            </MDBCardBody>\n        </MDBCard>\n    )\n}\n\nexport default Card;","import React, { useState, useEffect } from 'react';\nimport { getCategories, list } from './apiCore';\nimport Card from './Card';\nimport { MDBCol, MDBRow, MDBBtn, MDBCard } from \"mdbreact\";\n\nconst Search = () => {\n    const [data, setData] = useState({\n        categories: [],\n        category: '',\n        search: '',\n        results: [],\n        searched: false\n    })\n\n    const { categories, category, search, results, searched } = data;\n\n    const loadCategories = () => {\n        getCategories()\n            .then(data => {\n                if (data.err) {\n                    console.log(data.err);\n                } else {\n                    setData({\n                        ...data, categories: data\n                    })\n                }\n            })\n    }\n    useEffect(() => {\n        loadCategories()\n    }, [])\n\n    const searchData = () => {\n        if (search) {\n            list({ search: search || undefined, category })\n                .then(res => {\n                    if (res.err) {\n                        console.log(res.err);\n                    } else {\n                        setData({ ...data, results: res, searched: true })\n                    }\n                })\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        searchData();\n    }\n\n    const handleChange = (name) => e => {\n        setData({ ...data, [name]: e.target.value, searched: false })\n    }\n\n    const searchMessage = (searched, results) => {\n        if (searched && results.length <= 0) {\n            return <p className=\"ml-3\">No result found</p>;\n        }\n        if (searched && results.length > 0) {\n            return <p className=\"ml-3\"><b>{results.length} results</b> found</p>;\n        }\n    }\n\n    const searchedProducts = (products = []) => {\n        return (\n            <>\n                {searchMessage(searched, results)}\n                <MDBRow>\n                    {products.map((product, i) => (\n                        <MDBCol key={i} sm=\"12\" md=\"4\" lg=\"3\" className=\"mb-5\">\n                            <Card product={product} />\n                        </MDBCol>))}\n                </MDBRow>\n            </>\n        )\n    }\n\n    const searchForm = () => {\n        return (\n            <>\n                <MDBRow>\n                    <MDBCard className=\"card-body\" style={{ width: \"22rem\", margin: \"15px\" }}>\n                        <div style={{ display: \"flex\" }}>\n                            <select\n                                style={{ width: \"25%\" }}\n                                className=\"browser-default custom-select\"\n                                onChange={handleChange('category')}\n                            >\n                                <option value=\"All\">All categories</option>\n                                {categories.map((c, i) => (\n                                    <option key={i} value={c._id}>{c.name}</option>\n                                ))}\n                            </select>\n\n                            <form style={{ width: \"60%\", paddingLeft: \"2%\" }} onSubmit={handleSubmit}>\n                                <div className=\"form-group mb-0\">\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"search\"\n                                        aria-describedby=\"search\"\n                                        placeholder=\"Search a book\"\n                                        onChange={handleChange('search')}\n                                    />\n                                </div>\n                            </form>\n\n                            <div className=\"ml-3\" >\n                                <MDBBtn style={{ height: \"38px\", borderRadius: \"5px\", paddingTop: \"0.5rem\" }}\n                                    outline\n                                    onClick={handleSubmit}\n                                    color=\"primary\"\n                                    className=\"m-0\">Search</MDBBtn>\n                            </div>\n                        </div>\n                    </MDBCard>\n                </MDBRow>\n                <MDBRow>\n                    <MDBCol>\n                        {searchedProducts(results)}\n                    </MDBCol>\n                </MDBRow>\n            </>\n        )\n    }\n\n    return (\n        <>\n            {searchForm()}\n        </>\n    )\n}\n\nexport default Search;","import React, { useState, useEffect } from 'react';\nimport { MDBRow, MDBCol } from 'mdbreact';\nimport Layout from './Layout';\nimport { getProducts } from './apiCore';\nimport Card from './Card';\nimport Search from './Search';\n\nconst Home = () => {\n    const [productsBySell, setProductsBySell] = useState([]);\n    const [productsByArrival, setProductsByArrival] = useState([]);\n    const [error, setError] = useState(false);\n\n    const loadProductsBySell = () => {\n        getProducts('sold')\n            .then(data => {\n                if (data.err) {\n                    setError(data.err);\n                } else {\n                    setProductsBySell(data);\n                }\n            })\n    }\n\n    const loadProductsByArrival = () => {\n        getProducts('createdAt')\n            .then(data => {\n                if (data.err) {\n                    setError(data.err);\n                } else {\n                    setProductsByArrival(data);\n                }\n            })\n    }\n\n    useEffect(() => {\n        loadProductsBySell();\n        loadProductsByArrival();\n    }, [])\n\n    return (\n        <Layout title=\"E-Books everywhere\" description=\"Expand your imagination\">\n            <Search />\n            {error ? <p>{error}</p> : ''}\n            <h2>New Arrivals Sellers</h2>\n            <MDBRow>\n                {productsByArrival.map((product, i) => (\n                    <MDBCol key={i} sm=\"12\" md=\"4\" lg=\"3\" className=\"mb-5\">\n                        <Card product={product} />\n                    </MDBCol>\n                ))}\n            </MDBRow>\n\n            <h2>Best Sellers</h2>\n            <MDBRow>\n                {productsBySell.map((product, i) => (\n                    <MDBCol key={i} sm=\"12\" md=\"4\" lg=\"3\" className=\"mb-5\">\n                        <Card product={product} />\n                    </MDBCol>\n                ))}\n            </MDBRow>\n        </Layout>\n    )\n}\n\nexport default Home;","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { MDBAlert, MDBRow, MDBCol, MDBBtn } from 'mdbreact';\n\nimport Layout from '../core/Layout';\nimport { signin, authenticate, isAuthentificated } from '../auth';\n\nconst Signin = () => {\n    const [values, setValues] = useState({\n        email: '',\n        password: '',\n        error: '',\n        loading: false,\n        redirectToReferrer: false\n    });\n\n    const { user } = isAuthentificated();\n\n    const { email, password, error, loading, redirectToReferrer } = values;\n\n    const handleChange = (e) => {\n        setValues({ ...values, error: false, [e.target.name]: e.target.value });\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setValues({ ...values, error: [], loading: true })\n        signin({ email, password })\n            .then(data => {\n                if (data.err) {\n                    setValues({ ...values, error: data.err, loading: false })\n                } else {\n                    authenticate(data, () => {\n                        setValues({ ...values, redirectToReferrer: true })\n                    })\n                }\n            })\n    }\n\n    const signinForm = () => {\n        return (\n            <MDBRow center>\n                <MDBCol md=\"6\">\n                    <form>\n                        <p className=\"h4 text-center mb-4\">Welcome, ready to read a good book?</p>\n                        {\n                            error\n                                ? error.map((err, i) => (\n                                    <MDBAlert color=\"danger\" key={i}>\n                                        {err.msg}\n                                    </MDBAlert>\n                                ))\n                                : ''\n                        }\n                        <label htmlFor=\"email\" className=\"grey-text\">\n                            Your email\n                        </label>\n                        <input\n                            type=\"email\"\n                            id=\"email\"\n                            name=\"email\"\n                            className=\"form-control\"\n                            value={email}\n                            onChange={(e) => handleChange(e)}\n                        />\n                        <br />\n                        <label\n                            htmlFor=\"password\"\n                            className=\"grey-text\"\n                        >\n                            Your password\n                        </label>\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            className=\"form-control\"\n                            value={password}\n                            onChange={(e) => handleChange(e)}\n                        />\n                        <div className=\"text-center mt-4\">\n                            <MDBBtn color=\"unique\" type=\"submit\" onClick={handleSubmit}>\n                                Signin\n                        </MDBBtn>\n                        </div>\n                    </form>\n                </MDBCol>\n            </MDBRow>\n        )\n    }\n\n    const showLoading = () => (\n        loading && (<div className=\"spinner-border\" role=\"status\"><span className=\"sr-only\">Loading...</span></div >)\n    )\n\n    const redirectUser = () => {\n        if (redirectToReferrer) {\n            if (user && user.role === 1) {\n                return <Redirect to=\"/admin/dashboard\" />\n            } else {\n                return <Redirect to=\"/\" />\n            }\n        }\n    }\n\n    return (\n        <>\n            <Layout title=\"Signin\" description=\"Best Ebooks E-commerce site\">\n                {showLoading()}\n                {signinForm()}\n                {redirectUser()}\n                <MDBRow center>\n                    <MDBCol md=\"6\">\n                        <div className=\"text-center mt-4\">\n                            <MDBBtn color=\"primary\" onClick={() => setValues({ email: \"111111@111111.com\", password: \"111111\" })}>User</MDBBtn>\n                            <MDBBtn color=\"primary\" onClick={() => setValues({ email: \"000000@000000.com\", password: \"000000\" })}>Admin</MDBBtn>\n                        </div>\n                    </MDBCol>\n                </MDBRow>\n            </Layout>\n        </>\n    )\n}\n\nexport default Signin;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MDBAlert, MDBRow, MDBCol, MDBBtn } from 'mdbreact';\n\nimport Layout from '../core/Layout';\nimport { signup } from '../auth';\n\nconst Signup = () => {\n    const [values, setValues] = useState({\n        name: '',\n        email: '',\n        password: '',\n        error: [],\n        success: false\n    });\n\n    const { name, email, password, error, success } = values;\n\n    const handleChange = (e) => {\n        setValues({ ...values, error: false, [e.target.name]: e.target.value });\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        signup({ name, email, password })\n            .then(data => {\n                if (data.err) {\n                    setValues({ ...values, error: data.err, success: false })\n                } else {\n                    setValues({ ...values, name: '', email: '', password: '', error: '', success: true })\n                }\n            })\n    }\n\n\n\n    const signupForm = () => {\n        return (\n            <MDBRow center>\n                <MDBCol md=\"6\">\n                    <form>\n                        <p className=\"h4 text-center mb-4\">Sign up</p>\n                        <label htmlFor=\"name\" className=\"grey-text\">\n                            Your name\n                        </label>\n                        <input\n                            type=\"text\"\n                            id=\"name\"\n                            className={\n                                error.hasOwnProperty(\"name\")\n                                    ? \"form-control is-invalid\"\n                                    : 'form-control'\n                            }\n                            name=\"name\"\n                            value={name}\n                            onChange={(e) => handleChange(e)}\n                        />\n                        {/* name check */}\n                        {error && error.name\n                            ? error.name.map((pass, i) => (\n                                <div className=\"invalid-feedback\" key={i}>{pass.msg}</div>\n                            ))\n                            : \"\"\n                        }\n                        {/* /name check */}\n                        <br />\n                        <label htmlFor=\"email\" className=\"grey-text\">\n                            Your email\n                        </label>\n                        <input\n                            type=\"email\"\n                            id=\"email\"\n                            className={\n                                error.hasOwnProperty(\"email\")\n                                    ? \"form-control is-invalid\"\n                                    : 'form-control'\n                            }\n                            name=\"email\"\n                            value={email}\n                            onChange={(e) => handleChange(e)}\n                        />\n                        {/* email check */}\n                        {error && error.email\n                            ? error.email.map((pass, i) => (\n                                <div className=\"invalid-feedback\" key={i}>{pass.msg}</div>\n                            ))\n                            : \"\"\n                        }\n                        {/* /email check */}\n                        <br />\n                        <label\n                            htmlFor=\"password\"\n                            className=\"grey-text\"\n                        >\n                            Your password\n                        </label>\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            className={\n                                error.hasOwnProperty(\"password\")\n                                    ? \"form-control is-invalid\"\n                                    : 'form-control'\n                            }\n                            value={password}\n                            onChange={(e) => handleChange(e)}\n                        />\n                        {/* Password check */}\n                        {error && error.password\n                            ? error.password.map((pass, i) => (\n                                <div className=\"invalid-feedback\" key={i}>{pass.msg}</div>\n                            ))\n                            : \"\"\n                        }\n                        {/* /Password check */}\n                        <div className=\"text-center mt-4\">\n                            <MDBBtn color=\"unique\" type=\"submit\" onClick={handleSubmit}>\n                                Signup\n                        </MDBBtn>\n                        </div>\n                    </form>\n                </MDBCol>\n            </MDBRow>\n        )\n    }\n\n    const showSuccess = () => {\n        return (\n            <div style={{ display: success ? 'block' : 'none' }}>\n                <MDBAlert color=\"info\">\n                    New account created. Please <Link to=\"/signin\">Signin</Link>\n                </MDBAlert>\n            </div>\n\n        )\n    }\n\n    return (\n        <>\n            <Layout title=\"Signup\" description=\"Signup to E-commerce site\">\n                {showSuccess()}\n\n                {signupForm()}\n            </Layout>\n        </>\n    )\n}\n\nexport default Signup;","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\n\nimport { isAuthentificated } from './index';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                isAuthentificated()\n                    ? (<Component {...props} />)\n                    : (<Redirect to={{ pathname: \"/signin\", state: { from: props.location } }} />)\n            }\n        />\n    );\n}\n\nexport default PrivateRoute;","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\n\nimport { isAuthentificated } from './index';\n\nconst AdminRoute = ({ component: Component, ...rest }) => {\n\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                isAuthentificated() && isAuthentificated().user.role === 1\n                    ? (<Component {...props} />)\n                    : (<Redirect to={{ pathname: \"/signin\", state: { from: props.location } }} />)\n            }\n        />\n    );\n}\n\nexport default AdminRoute;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Layout from '../core/Layout';\nimport { isAuthentificated } from '../auth';\nimport { getPurchaseHistory } from './apiUser';\nimport moment from 'moment';\n\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBTable, MDBTableBody, MDBTableHead, MDBCol, MDBListGroup, MDBListGroupItem, MDBRow } from 'mdbreact';\n\nconst Dashboard = () => {\n    const [history, setHistory] = useState([]);\n    const { user: { _id, name, userEmail: email, role } } = isAuthentificated();\n    const token = isAuthentificated().token;\n\n    const init = (userId, token) => {\n        getPurchaseHistory(userId, token)\n            .then(data => {\n                if (data.error) {\n                    console.log(data.error);\n                } else {\n                    setHistory(data);\n                }\n            })\n    }\n\n    useEffect(() => {\n        init(_id, token)\n    }, [_id, token])\n\n    const userLinks = () => {\n        return (\n            <MDBCardBody>\n                <MDBCardTitle>User Links</MDBCardTitle>\n                <MDBListGroup>\n                    <MDBListGroupItem>\n                        <Link to=\"/cart\">My Cart</Link>\n                    </MDBListGroupItem>\n                    <MDBListGroupItem>\n                        <Link to={`/profile/${_id}`}>Update profile</Link>\n                    </MDBListGroupItem>\n                </MDBListGroup>\n            </MDBCardBody>\n        )\n    }\n\n    const userInfo = () => (\n        <MDBCol size=\"4\">\n            <MDBCard>\n                <MDBCardImage className=\"img-fluid\" src=\"https://mdbootstrap.com/img/Photos/Others/images/43.jpg\" waves />\n                {userLinks()}\n                <MDBCardBody>\n                    <MDBCardTitle>User informations</MDBCardTitle>\n                    <MDBListGroup>\n                        <MDBListGroupItem>Name: <b>{name}</b></MDBListGroupItem>\n                        <MDBListGroupItem>Email: <b>{email}</b></MDBListGroupItem>\n                        <MDBListGroupItem>Role: <b>{role === 1 ? 'Admin' : 'Registered user'}</b></MDBListGroupItem>\n                    </MDBListGroup>\n                </MDBCardBody>\n            </MDBCard>\n        </MDBCol>\n    )\n\n    const userHistory = () => (\n        <MDBCol size=\"8\">\n            <h1>Purchase history</h1>\n            <MDBTable>\n                <MDBTableHead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Price</th>\n                        <th>Date</th>\n                    </tr>\n                </MDBTableHead>\n                {history.map((h, i) => {\n                    return h.products.map((product, iProduct) => {\n                        return (\n                            <MDBTableBody key={iProduct}>\n                                <tr>\n                                    <td>{product.name}</td>\n                                    <td>{product.price} €</td>\n                                    <td>{moment(h.createdAt).fromNow()}</td>\n                                </tr>\n                            </MDBTableBody>\n                        )\n                    })\n                })}\n            </MDBTable>\n        </MDBCol>\n    )\n\n    return (\n        <>\n            <Layout title=\"Dashboard\" description={`Nice to see you ${name}`}>\n                <MDBRow className=\"mb-5\">\n                    {userInfo()}\n                    {userHistory(history)}\n                </MDBRow>\n            </Layout>\n        </>\n    )\n}\n\nexport default Dashboard;","import { API } from '../../config';\n\nexport const read = (userId, token) => {\n    return fetch(`${API}/user/${userId}`, {\n        method: \"GET\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const update = (userId, token, user) => {\n\n    return fetch(`${API}/user/${userId}`, {\n        method: \"PUT\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(user)\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const updateUser = (user, next) => {\n    if (typeof window !== 'undefined') {\n        if (localStorage.getItem('jwt')) {\n            let auth = JSON.parse(localStorage.getItem('jwt'));\n            auth.user = user;\n            localStorage.setItem('jwt', JSON.stringify(auth));\n            next();\n        }\n    }\n}\n\nexport const getPurchaseHistory = (userId, token) => {\n    return fetch(`${API}/orders/by/user/${userId}`, {\n        method: \"GET\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBTable, MDBTableBody, MDBTableHead, MDBCol, MDBListGroup, MDBListGroupItem, MDBRow } from 'mdbreact';\n\nimport Layout from '../core/Layout';\nimport { isAuthentificated } from '../auth';\n\n\nconst AdminDashboard = () => {\n    const { user: { _id, name, userEmail: email, role } } = isAuthentificated();\n\n    const adminLinks = () => {\n        return (\n            <MDBCardBody>\n                <MDBCardTitle>Admin Links</MDBCardTitle>\n                <MDBListGroup>\n                    <MDBListGroupItem>\n                        <Link to=\"/category/create\">Create category</Link>\n                    </MDBListGroupItem>\n                    <MDBListGroupItem>\n                        <Link to={`/product/create/${_id}`}>Create product</Link>\n                    </MDBListGroupItem>\n                    <MDBListGroupItem>\n                        <Link to=\"/admin/orders\">View orders</Link>\n                    </MDBListGroupItem>\n                    <MDBListGroupItem>\n                        <Link to=\"/admin/products\">Manage products</Link>\n                    </MDBListGroupItem>\n                </MDBListGroup>\n            </MDBCardBody>\n        )\n    }\n\n    const adminInfo = () => (\n        <MDBCol size=\"4\">\n            <MDBCard>\n                <MDBCardImage className=\"img-fluid\" src=\"https://mdbootstrap.com/img/Photos/Others/images/43.jpg\" waves />\n                {adminLinks()}\n                <MDBCardBody>\n                    <MDBCardTitle>User informations</MDBCardTitle>\n                    <MDBListGroup>\n                        <MDBListGroupItem>Name: <b>{name}</b></MDBListGroupItem>\n                        <MDBListGroupItem>Email: <b>{email}</b></MDBListGroupItem>\n                        <MDBListGroupItem>Role: <b>{role === 1 ? 'Admin' : 'Registered user'}</b></MDBListGroupItem>\n                    </MDBListGroup>\n                </MDBCardBody>\n            </MDBCard>\n        </MDBCol>\n    )\n\n    return (\n        <>\n            <Layout title=\"Admin Dashboard\" description={`Nice to see you ${name}`}>\n                <MDBRow className=\"mb-5\">\n                    {adminInfo()}\n                </MDBRow>\n            </Layout>\n        </>\n    )\n}\n\nexport default AdminDashboard;","import { API } from '../../config';\n\nexport const createCategory = (userId, token, category) => {\n    return fetch(`${API}/category/create/${userId}`, {\n        method: \"POST\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(category)\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const createProduct = (userId, token, product) => {\n    return fetch(`${API}/product/create/${userId}`, {\n        method: \"POST\",\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: product\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const getCategories = () => {\n    return fetch(`${API}/categories`, {\n        method: \"GET\"\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const listOrders = (uderId, token) => {\n    return fetch(`${API}/order/list/${uderId}`, {\n        method: \"GET\",\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const getStatusValues = (uderId, token) => {\n    return fetch(`${API}/order/status-values/${uderId}`, {\n        method: \"GET\",\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const updateOrderStatus = (userId, token, orderId, status) => {\n    return fetch(`${API}/order/${orderId}/status/${userId}`, {\n        method: \"PUT\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({ status, orderId })\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\n// CRUD ON PRODUCT\n\nexport const getProducts = () => {\n    return fetch(`${API}/products?limit=100`, {\n        method: \"GET\"\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const deleteProduct = (productId, userId, token) => {\n    return fetch(`${API}/product/${productId}/${userId}`, {\n        method: \"DELETE\",\n        headers: {\n            Accept: 'application/json',\n            \"Content-Type\": 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const getProduct = (productId) => {\n    return fetch(`${API}/product/${productId}`, {\n        method: \"GET\"\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}\n\nexport const updateProduct = (productId, userId, token, product) => {\n    return fetch(`${API}/product/${productId}/${userId}`, {\n        method: \"PUT\",\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: product\n    })\n        .then(res => {\n            return res.json()\n        })\n        .catch(err => console.error(err))\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MDBAlert, MDBRow, MDBCol, MDBBtn } from 'mdbreact';\n\nimport Layout from '../core/Layout';\nimport { isAuthentificated } from '../auth';\nimport { createCategory } from './apiAdmin';\n\n\nconst AddCategory = () => {\n    const [name, setName] = useState('');\n    const [error, setError] = useState(false);\n    const [success, setSuccess] = useState(false);\n\n    const { user, token } = isAuthentificated();\n\n    const handleChange = (e) => {\n        setError(false);\n        setName(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //API\n        createCategory(user._id, token, { name })\n            .then(data => {\n                if (data.err) {\n                    setSuccess(false);\n                    setError(true);\n                } else {\n                    setError(false);\n                    setSuccess(true);\n                }\n            })\n    }\n\n    const newCategoryForm = () => (\n        <MDBRow center>\n            <MDBCol md=\"6\">\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"name\" className=\"grey-text\">Category name</label>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        className={\n                            error\n                                ? \"form-control is-invalid\"\n                                : 'form-control'\n                        }\n                        minLength=\"2\"\n                        value={name}\n                        onChange={handleChange}\n                        autoFocus\n                        required\n                    />\n                    <div className=\"text-center mt-4\">\n                        <MDBBtn color=\"indigo\" type=\"submit\">Create category</MDBBtn>\n                    </div>\n                    <div className=\"text-center mt-4\">\n                        {goBack()}\n                    </div>\n                </form>\n            </MDBCol>\n        </MDBRow>\n    )\n\n    const showSuccess = () => {\n        if (success) {\n            return (\n                <MDBAlert color=\"success\" >\n                    {name} is created!\n                </MDBAlert>\n            )\n            setName('');\n        }\n    }\n\n    const showError = () => {\n        if (error) {\n            return (\n                <MDBAlert color=\"danger\" >\n                    Category {name} already exist!\n                </MDBAlert>\n            )\n        }\n    }\n\n    const goBack = () => {\n        return (\n            <Link to='/admin/dashboard'>Back to Dashboard</Link>\n        )\n    }\n\n    return (\n        <>\n            <Layout title=\"Category\" description=\"Create a new category\">\n                {showSuccess()}\n                {showError()}\n                {newCategoryForm()}\n            </Layout>\n        </>\n    )\n}\n\nexport default AddCategory;","import React, { useState, useEffect } from 'react';\nimport { MDBAlert, MDBRow, MDBCol, MDBBtn, MDBIcon } from 'mdbreact';\n\nimport Layout from '../core/Layout';\nimport { isAuthentificated } from '../auth';\nimport { createProduct, getCategories } from './apiAdmin';\n\n\nconst AddProduct = () => {\n    const { user, token } = isAuthentificated();\n    const [values, setValues] = useState({\n        name: '',\n        description: '',\n        price: '',\n        categories: [],\n        category: '',\n        shipping: '',\n        quantity: '',\n        photo: '',\n        loading: '',\n        error: '',\n        createdProduct: '',\n        redirectToProfile: false,\n        formData: ''\n    })\n\n    const { name, description, price, categories, photo, quantity, loading, error, createdProduct, formData } = values;\n\n    //Load categoeries\n    const init = () => {\n        getCategories()\n            .then(data => {\n                if (data.err) {\n                    setValues({ ...values, error: data.err })\n                } else {\n                    setValues({ ...values, categories: data, formData: new FormData() })\n                }\n            })\n    }\n\n    useEffect(() => {\n        init();\n    }, [])\n\n    const handleChange = (e) => {\n        const value = e.target.name === 'photo' ? e.target.files[0] : e.target.value;\n\n        formData.set([e.target.name], value);\n        setValues({\n            ...values,\n            [e.target.name]: value\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setValues({ ...values, error: '', loading: true });\n        createProduct(user._id, token, formData)\n            .then((data) => {\n                if (data.err) {\n                    setValues({ ...values, error: data.err });\n                } else {\n                    setValues({\n                        ...values,\n                        name: '',\n                        description: '',\n                        price: '',\n                        category: '',\n                        shipping: '',\n                        quantity: '',\n                        photo: '',\n                        loading: false,\n                        error: '',\n                        createdProduct: data.name,\n                    })\n                }\n            })\n    }\n\n    const newProductForm = () => (\n        <MDBRow center>\n            <MDBCol md=\"6\">\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"name\" className=\"grey-text\">Name</label>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        className={\n                            error\n                                ? \"form-control is-invalid\"\n                                : 'form-control'\n                        }\n                        minLength=\"2\"\n                        value={name}\n                        onChange={handleChange}\n                        autoFocus\n                        required\n                    />\n\n                    <label htmlFor=\"description\" className=\"grey-text\">Description</label>\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\" id=\"basic-addon\">\n                                <i className=\"fas fa-pencil-alt prefix\"></i>\n                            </span>\n                        </div>\n                        <textarea\n                            className={\n                                error\n                                    ? \"form-control is-invalid\"\n                                    : 'form-control'\n                            }\n                            id=\"description\"\n                            name=\"description\"\n                            minLength=\"2\"\n                            rows=\"5\"\n                            value={description}\n                            onChange={handleChange}\n                            required\n                        >\n\n                        </textarea>\n                    </div>\n                    <label htmlFor=\"price\" className=\"grey-text\">Price</label>\n                    <input\n                        type=\"number\"\n                        id=\"price\"\n                        name=\"price\"\n                        min=\"1\"\n                        className={\n                            error\n                                ? \"form-control is-invalid\"\n                                : 'form-control'\n                        }\n                        value={price}\n                        onChange={handleChange}\n                        required\n                    />\n                    <br />\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\" id=\"choose-photo\">\n                                <MDBIcon icon=\"file-upload\" />\n                            </span>\n                        </div>\n                        <div className=\"custom-file\">\n                            <input\n                                type=\"file\"\n                                className=\"custom-file-input\"\n                                aria-describedby=\"choose-photo\"\n                                name=\"photo\"\n                                id=\"photo\"\n                                accept=\"image/*\"\n                                onChange={handleChange}\n                            />\n                            <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\n                                {photo ? photo.name : 'Choose a photo'}\n                            </label>\n                        </div>\n                    </div>\n                    <label htmlFor=\"category\" className=\"grey-text\">Category</label>\n                    <div>\n                        <select\n                            className=\"browser-default custom-select\"\n                            onChange={handleChange}\n                            name=\"category\"\n                            id=\"category\"\n                        >\n                            <option>Choose your category</option>\n                            {categories && categories.map((categorie, i) =>\n                                (<option key={i} value={categorie._id}>{categorie.name}</option>))\n                            }\n                        </select>\n                    </div>\n                    <label htmlFor=\"quantity\" className=\"grey-text\">Quantity</label>\n                    <input\n                        type=\"number\"\n                        id=\"quantity\"\n                        name=\"quantity\"\n                        className={\n                            error\n                                ? \"form-control is-invalid\"\n                                : 'form-control'\n                        }\n                        min=\"1\"\n                        value={quantity}\n                        onChange={handleChange}\n                        required\n                    />\n                    <label htmlFor=\"shipping\" className=\"grey-text\">Shipping</label>\n                    <div>\n                        <select\n                            className=\"browser-default custom-select\"\n                            onChange={handleChange}\n                            name=\"shipping\"\n                            id=\"shipping\"\n                        >\n                            <option>Do you want shipping ?</option>\n                            <option value=\"0\">No</option>\n                            <option value=\"1\">Yes</option>\n                        </select>\n                    </div>\n                    <div className=\"text-center mt-4\">\n                        <MDBBtn color=\"indigo\" type=\"submit\">Create product</MDBBtn>\n                    </div>\n                </form>\n            </MDBCol>\n        </MDBRow>\n    )\n\n    const showSuccess = () => {\n        if (createdProduct) {\n            return (\n                <MDBAlert color=\"success\" >\n                    {createdProduct} is created\n                </MDBAlert>\n            )\n        }\n    }\n\n    const showError = () => {\n        if (error) {\n            console.log(error);\n            return (\n                <MDBAlert color=\"danger\" >\n                    {error[0].msg}\n                </MDBAlert>\n            )\n        }\n    }\n\n    const showLoading = () => {\n        if (loading) {\n            return (\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            )\n        }\n    }\n\n    return (\n        <>\n            <Layout title=\"Product\" description=\"Create a new product\">\n                {showLoading()}\n                {showSuccess()}\n                {showError()}\n                {newProductForm()}\n            </Layout>\n        </>\n    )\n}\n\nexport default AddProduct;","import React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { MDBAlert, MDBRow, MDBCol, MDBBtn, MDBIcon } from 'mdbreact';\n\nimport Layout from '../core/Layout';\nimport { isAuthentificated } from '../auth';\nimport { getProduct, getCategories, updateProduct } from './apiAdmin';\n\n\nconst UpdateProduct = ({ match }) => {\n    const { user, token } = isAuthentificated();\n    const [values, setValues] = useState({\n        name: '',\n        description: '',\n        price: '',\n        categories: [],\n        category: '',\n        shipping: '',\n        quantity: '',\n        photo: '',\n        loading: '',\n        error: '',\n        createdProduct: '',\n        redirectToProfile: false,\n        formData: ''\n    })\n\n    const { name, description, price, categories, photo, quantity, loading, error, createdProduct, redirectToProfile, formData } = values;\n\n    //Load categoeries\n    const initCategories = () => {\n        getCategories()\n            .then(data => {\n                if (data.err) {\n                    setValues({ ...values, error: data.err })\n                } else {\n                    setValues({ categories: data, formData: new FormData() })\n                }\n            })\n    }\n\n    const init = (productId) => {\n        getProduct(productId)\n            .then(data => {\n                if (data.err) {\n                    setValues({ ...values, error: data.err })\n                } else {\n                    setValues({\n                        ...values,\n                        name: data.name,\n                        description: data.description,\n                        price: data.price,\n                        category: data.category._id,\n                        shipping: data.shipping,\n                        quantity: data.quantity,\n                        formData: new FormData(),\n                    })\n\n                    //Init categories\n                    initCategories();\n                }\n            })\n    }\n\n\n    useEffect(() => {\n        init(match.params.productId);\n    }, [])\n\n    const handleChange = (e) => {\n        const value = e.target.name === 'photo' ? e.target.files[0] : e.target.value;\n\n        formData.set([e.target.name], value);\n        setValues({\n            ...values,\n            [e.target.name]: value\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setValues({ ...values, error: '', loading: true });\n        updateProduct(match.params.productId, user._id, token, formData)\n            .then((data) => {\n                if (data.err) {\n                    setValues({ ...values, error: data.err });\n                } else {\n                    setValues({\n                        ...values,\n                        name: '',\n                        description: '',\n                        price: '',\n                        category: '',\n                        shipping: '',\n                        quantity: '',\n                        photo: '',\n                        loading: false,\n                        error: false,\n                        redirectToProfile: true,\n                        createdProduct: data.name,\n                    })\n                }\n            })\n    }\n\n    const newProductForm = () => (\n        <MDBRow center>\n            <MDBCol md=\"6\">\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"name\" className=\"grey-text\">Name</label>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        className={\n                            error\n                                ? \"form-control is-invalid\"\n                                : 'form-control'\n                        }\n                        minLength=\"2\"\n                        value={name}\n                        onChange={handleChange}\n                        autoFocus\n                        required\n                    />\n\n                    <label htmlFor=\"description\" className=\"grey-text\">Description</label>\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\" id=\"basic-addon\">\n                                <i className=\"fas fa-pencil-alt prefix\"></i>\n                            </span>\n                        </div>\n                        <textarea\n                            className={\n                                error\n                                    ? \"form-control is-invalid\"\n                                    : 'form-control'\n                            }\n                            id=\"description\"\n                            name=\"description\"\n                            minLength=\"2\"\n                            rows=\"5\"\n                            value={description}\n                            onChange={handleChange}\n                            required\n                        >\n\n                        </textarea>\n                    </div>\n                    <label htmlFor=\"price\" className=\"grey-text\">Price</label>\n                    <input\n                        type=\"number\"\n                        id=\"price\"\n                        name=\"price\"\n                        min=\"1\"\n                        className={\n                            error\n                                ? \"form-control is-invalid\"\n                                : 'form-control'\n                        }\n                        value={price}\n                        onChange={handleChange}\n                        required\n                    />\n                    <br />\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\" id=\"choose-photo\">\n                                <MDBIcon icon=\"file-upload\" />\n                            </span>\n                        </div>\n                        <div className=\"custom-file\">\n                            <input\n                                type=\"file\"\n                                className=\"custom-file-input\"\n                                aria-describedby=\"choose-photo\"\n                                name=\"photo\"\n                                id=\"photo\"\n                                accept=\"image/*\"\n                                onChange={handleChange}\n                            />\n                            <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\n                                {photo ? photo.name : 'Choose a photo'}\n                            </label>\n                        </div>\n                    </div>\n                    <label htmlFor=\"category\" className=\"grey-text\">Category</label>\n                    <div>\n                        <select\n                            className=\"browser-default custom-select\"\n                            onChange={handleChange}\n                            name=\"category\"\n                            id=\"category\"\n                        >\n                            <option>Choose your category</option>\n                            {categories && categories.map((categorie, i) =>\n                                (<option key={i} value={categorie._id}>{categorie.name}</option>))\n                            }\n                        </select>\n                    </div>\n                    <label htmlFor=\"quantity\" className=\"grey-text\">Quantity</label>\n                    <input\n                        type=\"number\"\n                        id=\"quantity\"\n                        name=\"quantity\"\n                        className={\n                            error\n                                ? \"form-control is-invalid\"\n                                : 'form-control'\n                        }\n                        min=\"1\"\n                        value={quantity}\n                        onChange={handleChange}\n                        required\n                    />\n                    <label htmlFor=\"shipping\" className=\"grey-text\">Shipping</label>\n                    <div>\n                        <select\n                            className=\"browser-default custom-select\"\n                            onChange={handleChange}\n                            name=\"shipping\"\n                            id=\"shipping\"\n                        >\n                            <option>Do you want shipping ?</option>\n                            <option value=\"0\">No</option>\n                            <option value=\"1\">Yes</option>\n                        </select>\n                    </div>\n                    <div className=\"text-center mt-4\">\n                        <MDBBtn color=\"indigo\" type=\"submit\">Update product</MDBBtn>\n                    </div>\n                </form>\n            </MDBCol>\n        </MDBRow>\n    )\n\n    const showSuccess = () => {\n        if (createdProduct) {\n            return (\n                <MDBAlert color=\"success\" >\n                    {createdProduct} is updated\n                </MDBAlert>\n            )\n        }\n    }\n\n    const showError = () => {\n        if (error) {\n            console.log(error);\n            return (\n                <MDBAlert color=\"danger\" >\n                    {error[0].msg}\n                </MDBAlert>\n            )\n        }\n    }\n\n    const redirectUser = () => {\n        if (redirectToProfile) {\n            if (!error) {\n                return <Redirect to=\"/\" />\n            }\n        }\n    }\n\n    const showLoading = () => {\n        if (loading) {\n            return (\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            )\n        }\n    }\n\n    return (\n        <>\n            <Layout title=\"Product\" description=\"Create a new product\">\n                {showLoading()}\n                {showSuccess()}\n                {showError()}\n                {newProductForm()}\n                {redirectUser()}\n            </Layout>\n        </>\n    )\n}\n\nexport default UpdateProduct;","import React, { useState } from 'react';\n\nconst CheckBox = ({ categories, handleFilters }) => {\n    const [checked, setChecked] = useState([]);\n\n    const handleToggle = c => () => {\n        const currentCategoryId = checked.indexOf(c);\n        const newCheckCategoryId = [...checked];\n        if (currentCategoryId === -1) {\n            newCheckCategoryId.push(c)\n        } else {\n            newCheckCategoryId.splice(currentCategoryId, 1);\n        }\n        setChecked(newCheckCategoryId);\n        handleFilters(newCheckCategoryId);\n    }\n\n    return categories.map((c, i) => (\n        <li key={i} style={{ listStyle: \"none\" }}>\n            <input\n                onChange={handleToggle(c._id)}\n                className=\"styled-checkbox\"\n                id={`styled-checkbox-${i}`}\n                value={checked.indexOf(c._id === -1)}\n                type=\"checkbox\" />\n            <label htmlFor={`styled-checkbox-${i}`}>{c.name}</label>\n        </li>\n    ))\n};\n\nexport default CheckBox;","import React, { useState } from 'react';\n\nconst RadioBox = ({ prices, handleFilters }) => {\n    const [value, setValue] = useState(0);\n\n    const handleChange = (e) => {\n        handleFilters(e.target.value);\n        setValue(e.target.value);\n    }\n\n    return prices.map((p, i) => (\n        <div key={i}>\n            <input\n                onChange={handleChange}\n                name=\"styled-radio\"\n                id={`styled-radiobox-${i}`}\n                className=\"styled-radio\"\n                value={p._id}\n                type=\"radio\" />\n            <label htmlFor={`styled-radiobox-${i}`} className=\"ml-2\">{p.name}</label>\n        </div>\n    ))\n};\n\nexport default RadioBox;","export const prices = [\n    {\n        _id: 0,\n        name: \"Any\",\n        array: []\n    },\n    {\n        _id: 1,\n        name: \"0 to 9€\",\n        array: [0, 9]\n    },\n    {\n        _id: 2,\n        name: \"10 to 19€\",\n        array: [10, 19]\n    },\n    {\n        _id: 3,\n        name: \"20 to 29€\",\n        array: [20, 29]\n    },\n    {\n        _id: 4,\n        name: \"30 to 39€\",\n        array: [30, 39]\n    },\n    {\n        _id: 5,\n        name: \"More than 40€\",\n        array: [40, 99]\n    },\n]","import React, { useState, useEffect } from 'react';\nimport { MDBRow, MDBCol, MDBBtn } from 'mdbreact';\n\nimport Layout from './Layout';\nimport Card from './Card';\nimport { getCategories, getFilteredProducts } from './apiCore';\nimport Checkbox from './Checkbox';\nimport RadioBox from './RadioBox';\nimport { prices } from './fixedPrices';\n\nconst Shop = () => {\n    const [categories, setCategories] = useState([]);\n    const [error, setError] = useState(false);\n    const [limit] = useState(6);\n    const [skip, setSkip] = useState(0);\n    const [size, setSize] = useState(0);\n    const [filteredResults, setFilteredResults] = useState([]);\n    const [myFilters, setMyFilters] = useState({\n        filters: { category: [], price: [] }\n    });\n\n    //Load categories\n    const init = () => {\n        getCategories()\n            .then(data => {\n                if (data.err) {\n                    setError(data.err)\n                } else {\n                    setCategories(data)\n                }\n            })\n    }\n\n    const loadFilteredResults = (newFilters) => {\n        getFilteredProducts(skip, limit, newFilters)\n            .then((data => {\n                if (data.err) {\n                    setError(data.err);\n                } else {\n                    setFilteredResults(data.products);\n                    setSize(data.size);\n                    setSkip(0)\n                }\n            }))\n    }\n\n    const loadMore = () => {\n        let toSkip = skip + limit;\n        getFilteredProducts(toSkip, limit, myFilters.filters)\n            .then((data => {\n                if (data.err) {\n                    setError(data.err);\n                } else {\n                    setFilteredResults([...filteredResults, ...data.products]);\n                    setSize(data.size);\n                    setSkip(toSkip);\n                }\n            }))\n    }\n\n    const loadMoreButton = () => {\n        return (\n            size > 0 && size >= limit && (\n                <MDBBtn onClick={loadMore} color=\"primary\">Load more</MDBBtn>\n            )\n        )\n    }\n\n    useEffect(() => {\n        init();\n        loadFilteredResults(skip, limit, myFilters.filters);\n    }, [])\n\n    const handleFilters = (filters, filterBy) => {\n        const newFilters = { ...myFilters };\n        newFilters.filters[filterBy] = filters;\n\n        if (filterBy === \"price\") {\n            let priceValues = handlePrice(filters);\n            newFilters.filters[filterBy] = priceValues;\n        }\n\n        loadFilteredResults(myFilters.filters)\n\n        setMyFilters(newFilters);\n    }\n\n    const handlePrice = id => {\n        const data = prices;\n        let array = [];\n\n        for (let key in data) {\n            if (data[key]._id === parseInt(id)) {\n                array = data[key].array\n            }\n        }\n\n        return array;\n    }\n\n\n    return (\n        <Layout title=\"Shop page\" description=\"Search book of your choice\">\n            <MDBRow>\n                <MDBCol md=\"2\">\n                    {error ? <p>{error}</p> : ''}\n                    <h4>Filter by categories</h4>\n                    <ul className=\"pl-0\">\n                        <Checkbox categories={categories} handleFilters={filters => handleFilters(filters, \"category\")} />\n                    </ul>\n\n                    <h4>Filter by price range</h4>\n                    <ul className=\"pl-0\">\n                        <RadioBox prices={prices} handleFilters={filters => handleFilters(filters, \"price\")} />\n                    </ul>\n                </MDBCol>\n                <MDBCol md=\"10\">\n                    <h2>Products</h2>\n                    <MDBRow center>\n                        {filteredResults.map((product, i) => (\n                            <MDBCol key={i} size=\"12\" xs=\"10\" sm=\"10\" md=\"6\" lg=\"4\" className=\"mb-5\">\n                                <Card product={product} />\n                            </MDBCol>\n                        ))}\n                    </MDBRow>\n                    {loadMoreButton()}\n                </MDBCol>\n            </MDBRow>\n        </Layout>\n    )\n};\n\nexport default Shop;","import React, { useState, useEffect } from 'react';\nimport { MDBRow, MDBCol } from 'mdbreact';\nimport Layout from './Layout';\nimport { read } from './apiCore';\nimport Card from './Card';\nimport { listRelated } from './apiCore';\n\nconst Product = (props) => {\n    const [product, setProduct] = useState({});\n    const [error, setError] = useState(false);\n    const [relatedProduct, setRelatedProduct] = useState([]);\n\n    const loadSingleProduct = productId => {\n        read(productId).then(data => {\n            if (data.err) {\n                setError(data.err);\n            } else {\n                setProduct(data);\n                listRelated(data._id)\n                    .then(data => {\n                        if (data.err) {\n                            setError(data.err);\n                        } else {\n                            setRelatedProduct(data);\n                        }\n                    })\n            }\n        })\n    }\n\n    useEffect(() => {\n        const productId = props.match.params.id;\n        loadSingleProduct(productId)\n    }, [props])\n\n    return (\n        <Layout title={product.name} description={product && product.description && product.description.substring(0, 100)}>\n\n            <MDBRow>\n                <MDBCol md=\"8\">\n                    <h2>Product</h2>\n                    {product && product.description && product.description && (\n                        <Card product={product} isSingle={true} />\n                    )}\n                </MDBCol>\n                <MDBCol md=\"4\">\n                    <h4>Related product</h4>\n                    {error ? <p>{error}</p> : ''}\n                    {relatedProduct.map((product, i) => (\n                        <Card key={i} product={product} />\n                    ))}\n                </MDBCol>\n            </MDBRow>\n        </Layout>\n    )\n}\n\nexport default Product;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport DropIn from 'braintree-web-drop-in-react';\nimport { MDBBtn, MDBAlert, MDBInput } from \"mdbreact\";\n\nimport { isAuthentificated } from '../auth';\nimport { getBraintreeClientToken, processPayment, createOrder } from './apiCore';\nimport { emptyCart } from './cartHelpers';\n\nconst Checkout = ({ products }) => {\n\n    const [data, setData] = useState({\n        loading: false,\n        success: false,\n        clientToken: null,\n        error: '',\n        instance: {},\n        address: ''\n    })\n\n    const userId = isAuthentificated() && isAuthentificated().user._id;\n    const token = isAuthentificated() && isAuthentificated().token;\n\n    const getToken = (userId, token) => {\n        getBraintreeClientToken(userId, token)\n            .then(data => {\n                if (data === 'undefined') {\n                    setData({ ...data, error: \"Can not load token\" })\n                } else {\n                    console.log(\"access token\")\n                    setData({ clientToken: data.clientToken })\n                }\n            })\n    }\n\n    useEffect(() => {\n        getToken(userId, token);\n    }, [])\n\n    const getTotal = () => {\n        return products.reduce((acc, product) => {\n            return acc + product.count * product.price;\n        }, 0)\n    }\n\n    const showCheckout = () => {\n        return isAuthentificated() ? (\n            <div>{showDropIn()}</div>\n        ) : (\n                <Link to=\"signin\">\n                    <button type=\"button\" className=\"btn btn-primary\">Sign in to Checkout</button>\n                </Link>\n            )\n\n    }\n\n    let deliveryAddress = data.address;\n\n    const buy = () => {\n        setData({ loading: true })\n        let nonce;\n        let getNonce = data.instance.requestPaymentMethod()\n            .then(data => {\n                nonce = data.nonce;\n\n                const paymentData = {\n                    paymentMethodNonce: nonce,\n                    amount: getTotal(products)\n                }\n\n                processPayment(userId, token, paymentData)\n                    .then(res => {\n                        const createOrderData = {\n                            products: products,\n                            transaction_id: res.transaction.id,\n                            amount: res.transaction.amount,\n                            address: deliveryAddress\n                        }\n\n                        createOrder(userId, token, createOrderData);\n\n                        setData({ ...data, success: res.success })\n                        emptyCart(() => {\n                            setData({ loading: false, success: true })\n                        })\n                        //create order\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    })\n            })\n            .catch(error => {\n                setData({ ...data, error: error.message })\n                setData({ loading: false })\n                console.error(error);\n            })\n    }\n\n\n\n    const handleAddress = (e) => {\n        setData({ ...data, address: e.target.value })\n    }\n\n    const showDropIn = () => (\n        <div onBlur={() => setData({ ...data, error: \"\" })}>\n            {data.clientToken !== null && products.length > 0\n                ? (\n                    <div>\n                        <MDBInput\n                            onChange={handleAddress}\n                            type=\"textarea\"\n                            label=\"Your delivery address:\"\n                            background\n                        />\n                        <DropIn options={{\n                            authorization: data.clientToken,\n                            paypal: {\n                                flow: 'vault'\n                            }\n                        }} onInstance={instance => setData({ ...data, instance: instance })} />\n\n                        <MDBBtn onClick={buy} className=\"btn-block\" color=\"success\">Pay</MDBBtn>\n                    </div>\n                )\n                : null}\n        </div>\n    )\n\n    const showError = error => {\n        if (error) {\n            return (\n                <MDBAlert color=\"danger\" > {error} </MDBAlert>\n            )\n        }\n    }\n\n    const showSuccess = success => {\n        if (success) {\n            return (\n                <MDBAlert color=\"info\" > Thanks! your payment was successfull </MDBAlert>\n            )\n        }\n    }\n\n    const showLoading = loading => {\n        if (loading) {\n            return (\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            )\n        }\n    }\n\n    return (<div>\n        <h2>Total: {getTotal()} €</h2>\n        {showLoading(data.loading)}\n        {showError(data.error)}\n        {showSuccess(data.success)}\n        {showCheckout()}\n    </div>)\n}\n\nexport default Checkout;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Layout from './Layout';\nimport Card from './Card';\nimport Checkout from './Checkout';\nimport { getCart } from './cartHelpers';\nimport { MDBCol, MDBRow } from 'mdbreact';\n\n\nconst Cart = (props) => {\n    const [items, setItems] = useState([]);\n    const [refresh, setRefresh] = useState(0);\n\n    useEffect(() => {\n        setItems(getCart())\n    }, [refresh])\n\n    const refreshPage = () => {\n        setRefresh(Math.random())\n    }\n\n\n    const showItems = items => {\n        return (\n            <>\n                <h2>Your cart has {`${items.length}`} items</h2>\n                <hr />\n                {items.map((product, i) => (\n                    <Card\n                        key={i}\n                        product={product}\n                        showAddToCartButton={false}\n                        showRemoveProductButton={true}\n                        cartUpdate={true}\n                        refreshPage={refreshPage}\n                    />\n                ))}\n            </>\n        )\n    }\n\n    const noItemsMessage = () => (\n        <>\n            <h2>Your cart is empty</h2> <br />\n            <Link to=\"/shop\">Continue shopping</Link>\n        </>\n    )\n\n    return (\n        <Layout title=\"Shopping Cart\" description=\"Manage your cart items. Add remove or continue shopping\">\n            <MDBRow>\n                <MDBCol md=\"6\">\n                    {items.length > 0 ? showItems(items) : noItemsMessage()}\n                </MDBCol>\n                <MDBCol md=\"6\">\n                    <Checkout products={items} />\n                </MDBCol>\n            </MDBRow>\n        </Layout>\n    )\n}\n\nexport default Cart;","import React, { useState, useEffect } from 'react';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport moment from 'moment';\n\nimport Layout from '../core/Layout';\nimport { isAuthentificated } from '../auth';\nimport { listOrders, getStatusValues, updateOrderStatus } from './apiAdmin';\n\nconst Orders = () => {\n    const [orders, setOrders] = useState([]);\n    const [statusValues, setStatusValues] = useState([]);\n\n    const { user, token } = isAuthentificated()\n\n    const loadOrders = () => {\n        listOrders(user._id, token).then(data => {\n            if (data.err) {\n                console.log(data.err);\n            } else {\n                setOrders(data);\n            }\n        })\n    }\n    const loadStatusValues = () => {\n        getStatusValues(user._id, token).then(data => {\n            if (data.err) {\n                console.log(data.err);\n            } else {\n                setStatusValues(data);\n            }\n        })\n    }\n\n    useEffect(() => {\n        loadOrders();\n        loadStatusValues();\n    }, [])\n\n    const showOrdersLength = () => {\n        if (orders.length > 0) {\n            return (\n                <h1>Total orders: {orders.length}</h1>\n            )\n        } else {\n            return (\n                <h1>No orders</h1>\n            )\n        }\n    }\n\n    const showInput = (key, value) => {\n        return (\n            <td>\n                {key} : <input type=\"text\" value={value} readOnly />\n            </td>\n        )\n    }\n\n    const handleStatusChange = (e, orderId) => {\n        updateOrderStatus(user._id, token, orderId, e.target.value)\n            .then((data) => {\n                if (data.err) {\n                    console.log('Status update failed');\n                } else {\n                    loadOrders()\n                }\n            })\n    }\n\n    const showStatus = (order) => {\n        return (\n            <>\n                <div>{order.status}</div>\n                <select name=\"status\" id=\"status\" onChange={(e) => handleStatusChange(e, order._id)}>\n                    <option value={order.status}>Update Status</option>\n                    {statusValues.map((status, index) => (\n                        <option key={index} value={status}>\n                            {status}\n                        </option>\n                    ))}\n                </select>\n            </>\n        )\n    }\n\n    return (\n        <Layout title=\"Orders\" description=\"MLanage orders\">\n            {showOrdersLength()}\n\n            <MDBTable hover>\n                <MDBTableHead>\n                    <tr>\n                        <th>Order ID</th>\n                        <th>Status</th>\n                        <th>Transaction ID</th>\n                        <th>Amount</th>\n                        <th>Ordered By</th>\n                        <th>Ordered On</th>\n                        <th>Address</th>\n                    </tr>\n                </MDBTableHead>\n                {orders.map((order, orderIndex) => {\n                    return (\n                        <MDBTableBody key={orderIndex} style={{ borderTop: '3px solid black' }}>\n                            <tr style={{ background: 'lightblue' }}>\n                                <td>{order._id}</td>\n                                <td>{showStatus(order)}</td>\n                                <td>{order.transaction_id}</td>\n                                <td>{order.amount} €</td>\n                                <td>{order.user.name}</td>\n                                <td>{moment(order.createdAt).fromNow()}</td>\n                                <td>{order.address}</td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"7\" align=\"center\">\n                                    <b>Total products in the order : {order.products.length}</b>\n                                </td>\n                            </tr>\n\n                            {order.products.map((product, productIdex) => {\n                                return (\n                                    <tr key={productIdex} style={{ background: '#eee' }}>\n                                        {showInput('Product name', product.name)}\n                                        {showInput('Product price', product.price)}\n                                        {showInput('Product total', product.count)}\n                                        {showInput('Product Id', product._id)}\n                                        <td colSpan=\"3\"></td>\n                                    </tr>\n\n                                )\n                            })}\n\n                        </MDBTableBody>\n                    )\n                })}\n            </MDBTable>\n        </Layout>\n    )\n}\n\nexport default Orders;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MDBRow, MDBCol, MDBListGroup, MDBListGroupItem, MDBBtn } from 'mdbreact';\nimport { isAuthentificated } from '../auth';\nimport { getProducts, deleteProduct } from './apiAdmin';\n\nimport Layout from '../core/Layout';\n\nconst ManageProducts = () => {\n    const [products, setProducts] = useState([]);\n\n    const { user, token } = isAuthentificated();\n\n    const loadProducts = () => {\n        getProducts().then(data => {\n            if (data.err) {\n                console.log(data.err);\n            } else {\n                setProducts(data)\n            }\n        })\n    }\n\n    useEffect(() => {\n        loadProducts();\n    }, [])\n\n    const destroy = (productId) => {\n        const confirmed = window.confirm(\"Are you sure you want delete this product?\")\n        if (confirmed) {\n            deleteProduct(productId, user._id, token)\n                .then(data => {\n                    if (data.err) {\n                        console.log(data.err);\n                    } else {\n                        loadProducts();\n                    }\n\n                })\n        }\n    }\n\n    return (\n        <Layout title=\"Manage products\" description=\"Perform CRUD on products\">\n            <h2>Manage products</h2>\n            <MDBRow>\n                <MDBCol>\n                    <h2>Total products : {products.length}</h2>\n                    <MDBListGroup>\n                        {products.map((product, i) => {\n                            return (\n                                <MDBListGroupItem key={i}>\n                                    {product.name}\n                                    <MDBBtn\n                                        style={{ float: \"right\" }}\n                                        size=\"sm\"\n                                        color=\"danger\"\n                                        onClick={() => destroy(product._id)}\n                                    >Delete</MDBBtn>\n                                    <MDBBtn\n                                        style={{ float: \"right\" }}\n                                        size=\"sm\"\n                                        color=\"success\"><Link style={{ color: \"white\" }} to={`/admin/product/update/${product._id}`}>Update</Link></MDBBtn>\n                                </MDBListGroupItem>\n                            )\n                        })}\n                    </MDBListGroup>\n                </MDBCol>\n            </MDBRow>\n        </Layout>\n    )\n}\n\nexport default ManageProducts;","import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Layout from '../core/Layout';\nimport { isAuthentificated } from '../auth';\n\nimport { read, update, updateUser } from './apiUser';\nimport { MDBRow, MDBCol, MDBBtn, MDBCard, MDBCardBody, MDBIcon } from 'mdbreact';\n\nconst Profile = ({ match }) => {\n    const [values, setValues] = useState({\n        name: '',\n        email: '',\n        password: '',\n        error: '',\n        success: false\n    });\n\n    const { name, email, password, success } = values;\n    const { token } = isAuthentificated();\n\n    const init = (userId) => {\n        read(userId, token)\n            .then(data => {\n                if (data.err) {\n                    setValues({ ...values, error: true })\n                } else {\n                    setValues({ ...values, name: data.name, email: data.email })\n                }\n            })\n    }\n\n    useEffect(() => {\n        init(match.params.userId);\n    }, [])\n\n    const handleChange = (e) => {\n        setValues({ ...values, error: false, [e.target.name]: e.target.value })\n    }\n\n    const clickSubmit = (e) => {\n        e.preventDefault();\n        update(match.params.userId, token, { name, email, password })\n            .then(data => {\n                if (data.err) {\n                    console.log(data.err);\n                } else {\n                    updateUser(data, () => {\n                        setValues({ ...values, name: data.name, email: data.email, success: true })\n                    })\n                }\n            })\n    }\n\n    const redirectUser = (success) => {\n        if (success) {\n            return <Redirect to=\"/cart\" />\n        }\n    }\n\n    const profileUpdate = (name, email, passwor) => (\n        <MDBRow>\n            <MDBCol md=\"6\">\n                <MDBCard>\n                    <MDBCardBody>\n                        <form>\n                            <p className=\"h4 text-center py-4\">Your profile</p>\n                            <label\n                                htmlFor=\"defaultFormCardNameEx\"\n                                className=\"grey-text font-weight-light\"\n                            >\n                                Your name\n                            </label>\n                            <input\n                                type=\"text\"\n                                id=\"defaultFormCardNameEx\"\n                                className=\"form-control\"\n                                name=\"name\"\n                                value={name}\n                                onChange={handleChange}\n                            />\n                            <br />\n                            <label\n                                htmlFor=\"defaultFormCardEmailEx\"\n                                className=\"grey-text font-weight-light\"\n                            >\n                                Your email\n                            </label>\n                            <input\n                                type=\"email\"\n                                id=\"defaultFormCardEmailEx\"\n                                className=\"form-control\"\n                                name=\"email\"\n                                value={email}\n                                onChange={handleChange}\n                            />\n                            <br />\n                            <label\n                                htmlFor=\"defaultFormCardEmailEx\"\n                                className=\"grey-text font-weight-light\"\n                            >\n                                Password\n                            </label>\n                            <input\n                                type=\"password\"\n                                id=\"defaultFormCardEmailEx\"\n                                className=\"form-control\"\n                                name=\"password\"\n                                value={password}\n                                onChange={handleChange}\n                            />\n                            <div className=\"text-center py-4 mt-3\">\n                                <MDBBtn\n                                    onClick={clickSubmit}\n                                    className=\"btn btn-outline-purple\"\n                                    type=\"submit\">\n                                    Send\n                                <MDBIcon far icon=\"paper-plane\" className=\"ml-2\" />\n                                </MDBBtn>\n                            </div>\n                        </form>\n                    </MDBCardBody>\n                </MDBCard>\n            </MDBCol>\n        </MDBRow>\n    )\n\n    return (\n        <Layout title=\"Profile\" description=\"Update profile\">\n            <h2>Profile</h2>\n            {profileUpdate(name, email, password)}\n            {redirectUser(success)}\n        </Layout>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './components/core/Home';\nimport Signin from './components/user/Signin';\nimport Signup from './components/user/Signup';\nimport PrivateRoute from './components/auth/PrivateRoute';\nimport AdminRoute from './components/auth/AdminRoute';\nimport Dashboard from './components/user/UserDashboard';\nimport AdminDashboard from './components/user/AdminDashboard';\nimport AddCategory from './components/admin/addCategory';\nimport AddProduct from './components/admin/addProduct';\nimport UpdateProduct from './components/admin/UpdateProduct';\nimport Shop from './components/core/Shop';\nimport Product from './components/core/Product';\nimport Cart from './components/core/Cart';\nimport Orders from './components/admin/Orders';\nimport ManageProducts from './components/admin/ManageProducts';\nimport Profile from './components/user/Profile';\n\nconst Routes = () => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/shop\" exact component={Shop} />\n                <Route path=\"/signin\" exact component={Signin} />\n                <Route path=\"/signup\" exact component={Signup} />\n                <Route path=\"/cart\" exact component={Cart} />\n                <Route path=\"/product/:id\" exact component={Product} />\n                <PrivateRoute path=\"/user/dashboard\" exact component={Dashboard} />\n                <PrivateRoute path=\"/profile/:userId\" exact component={Profile} />\n                <AdminRoute path=\"/admin/dashboard\" exact component={AdminDashboard} />\n                <AdminRoute path=\"/category/create\" exact component={AddCategory} />\n                <AdminRoute path=\"/product/create/:userId\" exact component={AddProduct} />\n                <AdminRoute path=\"/admin/product/update/:productId\" exact component={UpdateProduct} />\n                <AdminRoute path=\"/admin/orders\" exact component={Orders} />\n                <AdminRoute path=\"/admin/products\" exact component={ManageProducts} />\n            </Switch>\n        </BrowserRouter>\n    )\n}\n\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\n//Material\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}